import asyncio
import os
import sqlite3
from aiohttp import web
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = "@GoCrypto10"
ADMIN_ID = 1580610086
REWARD_LINK = "https://teletype.in/@coinstart/guidestart10"

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

dp = Dispatcher()

# ==== –ë–ê–ó–ê –î–ê–ù–ù–´–• SQLite ====
def init_db():
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY
        )
    """)
    conn.commit()
    conn.close()

def add_user(user_id: int):
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    conn.commit()
    conn.close()

def get_all_users():
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("SELECT user_id FROM users")
    users = c.fetchall()
    conn.close()
    return [user[0] for user in users]

# ==== –ö–ù–û–ü–ö–ê ====
check_sub_button = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
])

# ==== –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ====
async def is_subscribed(user_id):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ['member', 'creator', 'administrator']
    except:
        return False

# ==== /start ====
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    add_user(user_id)

    if await is_subscribed(user_id):
        await message.answer(f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{REWARD_LINK}")
    else:
        await message.answer(
            f"‚ùó –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ {CHANNEL_USERNAME} –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=check_sub_button
        )

# ==== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò ====
@dp.callback_query(F.data == "check_sub")
async def handle_check_sub(callback: CallbackQuery):
    user_id = callback.from_user.id

    if await is_subscribed(user_id):
        await callback.message.edit_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞: {REWARD_LINK}")
    else:
        await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å", show_alert=True)

# ==== /broadcast ====
@dp.message(Command("broadcast"))
async def broadcast(message: Message):
    if message.from_user.id != ADMIN_ID:
        return

    text = message.text.replace("/broadcast", "").strip()
    if not text:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n–ù–∞–ø—Ä–∏–º–µ—Ä: /broadcast –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!")
        return

    users = get_all_users()
    sent = 0
    for user_id in users:
        try:
            await bot.send_message(user_id, text)
            sent += 1
        except:
            continue

    await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# ==== WEBHOOK ====
async def on_startup(bot: Bot):
    webhook_url = os.getenv("WEBHOOK_URL")
    await bot.set_webhook(webhook_url)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

async def on_shutdown(bot: Bot):
    await bot.delete_webhook()
    await bot.session.close()
    print("‚ùå Webhook —É–¥–∞–ª—ë–Ω")

async def handle_webhook(request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return web.Response()

# ==== –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê ====
async def handle_root(request):
    return web.Response(text="‚úÖ Bot is alive!")

# ==== –ó–ê–ü–£–°–ö ====
init_db()
app = web.Application()
app.router.add_post('/webhook', handle_webhook)
app.router.add_get("/", handle_root)
app.on_startup.append(lambda app: on_startup(bot))
app.on_shutdown.append(lambda app: on_shutdown(bot))

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=int(os.environ.get("PORT", 8000)))



   


